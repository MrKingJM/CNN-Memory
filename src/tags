!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DATASET_NAME	data_utils.py	/^DATASET_NAME = DATA_URL.split('\/')[-1]$/;"	v
DATA_ARCHIVE	data_utils.py	/^DATA_ARCHIVE = os.path.join(DATA_DIR, DATASET_NAME)$/;"	v
DATA_DIR	data_utils.py	/^DATA_DIR = '..\/data'$/;"	v
DATA_FILE_FORMAT	data_utils.py	/^DATA_FILE_FORMAT = '%s_dataset.pkl'$/;"	v
DATA_UNARCHIVE_DIR	data_utils.py	/^DATA_UNARCHIVE_DIR = os.path.join(DATA_DIR, DATASET_NAME.split('.')[0])$/;"	v
DATA_URL	data_utils.py	/^DATA_URL = 'https:\/\/www.cs.toronto.edu\/~kriz\/cifar-10-python.tar.gz'$/;"	v
FALGS	main.py	/^FALGS = tf.flags.FLAGS$/;"	v
IMAGE_NEW_SIZE	data_utils.py	/^IMAGE_NEW_SIZE = 28$/;"	v
IMAGE_ORIGINAL_SIZE	data_utils.py	/^IMAGE_ORIGINAL_SIZE = 32$/;"	v
MAIN_DIR	data_utils.py	/^MAIN_DIR = ''$/;"	v
TEST_DIR	data_utils.py	/^TEST_DIR = os.path.join(DATA_UNARCHIVE_DIR, 'images_evaluation')$/;"	v
TEST_ROTATIONS	data_utils.py	/^TEST_ROTATIONS = False$/;"	v
TRAIN_DIR	data_utils.py	/^TRAIN_DIR = os.path.join(DATA_UNARCHIVE_DIR, 'images_background')$/;"	v
TRAIN_ROTATIONS	data_utils.py	/^TRAIN_ROTATIONS = True # augment training data with rotations$/;"	v
Trainer	main.py	/^class Trainer():$/;"	c
__init__	main.py	/^    def __init__(self, train_data, valid_data, input_dim, output_dim=None):$/;"	m	class:Trainer
batch_size	main.py	/^    batch_size = self.batch_size$/;"	v	class:Trainer
ckpt	main.py	/^    ckpt = None$/;"	v	class:Trainer
convert_RGBs_to_Grey	data_utils.py	/^def convert_RGBs_to_Grey(img, width, height):$/;"	f
convert_image_array_to_RGBs	data_utils.py	/^def convert_image_array_to_RGBs(array):$/;"	f
crawl_directory	data_utils.py	/^def crawl_directory(augment_with_rotations=False,$/;"	f
data_utils	main.py	/^import data_utils$/;"	i
get_data	data_utils.py	/^def get_data():$/;"	f
logging	data_utils.py	/^import logging$/;"	i
logging	main.py	/^import logging$/;"	i
losses	main.py	/^    losses = []$/;"	v	class:Trainer
main	main.py	/^def main(unused_argv):$/;"	f
maybe_download_and_extract	data_utils.py	/^def maybe_download_and_extract():$/;"	f
np	data_utils.py	/^import numpy as np$/;"	i
np	main.py	/^import numpy as np$/;"	i
os	data_utils.py	/^import os$/;"	i
os	main.py	/^import os$/;"	i
output_dim	main.py	/^    output_dim = episode_width$/;"	v	class:Trainer
pickle	data_utils.py	/^import pickle$/;"	i
preprocess_dataset	data_utils.py	/^def preprocess_dataset():$/;"	f
random	main.py	/^import random$/;"	i
resize	data_utils.py	/^from skimage.transform import resize$/;"	i
resize_images	data_utils.py	/^def resize_images(images, new_width, new_height):$/;"	f
rotate	data_utils.py	/^from skimage.transform import rotate$/;"	i
run	main.py	/^    def run(self):$/;"	m	class:Trainer
saver	main.py	/^    saver = tf.train.Saver(max_to_keep=10)$/;"	v	class:Trainer
sess	main.py	/^    sess = tf.Session()$/;"	v	class:Trainer
subprocess	data_utils.py	/^import subprocess$/;"	i
tf	data_utils.py	/^import tensorflow as tf$/;"	i
tf	main.py	/^import tensorflow as tf$/;"	i
train_size	main.py	/^    train_size = len(train_data)$/;"	v	class:Trainer
unpickle	data_utils.py	/^def unpickle(filename):$/;"	f
valid_size	main.py	/^    valid_size = len(valid_data)$/;"	v	class:Trainer
write_datafiles	data_utils.py	/^def write_datafiles(directory, write_file,$/;"	f
