!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BasicClassifier	model.py	/^class BasicClassifier(object):$/;"	c
DATA_DIR	data_utils.py	/^DATA_DIR = os.path.join(REPO_DIR, 'python')$/;"	v
DATA_FILE_FORMAT	data_utils.py	/^DATA_FILE_FORMAT = os.path.join(MAIN_DIR, '%s_omni.pkl')$/;"	v
FLAGS	model.py	/^FLAGS = tf.flags.FLAGS$/;"	v
FLAGS	train.py	/^FLAGS = tf.flags.FLAGS$/;"	v
HD	omniglot/matlab/one-shot-classification/demo_classification.m	/^function cost = HD(itrain,itest)$/;"	f
IMAGE_NEW_SIZE	data_utils.py	/^IMAGE_NEW_SIZE = 28$/;"	v
IMAGE_ORIGINAL_SIZE	data_utils.py	/^IMAGE_ORIGINAL_SIZE = 105$/;"	v
LSHMemory	memory.py	/^class LSHMemory(Memory):$/;"	c
LeNet	model.py	/^class LeNet(object):$/;"	c
LoadImgAsPoints	omniglot/python/one-shot-classification/demo_classification.py	/^def LoadImgAsPoints(fn):$/;"	f
MAIN_DIR	data_utils.py	/^MAIN_DIR = ''$/;"	v
Memory	memory.py	/^class Memory(object):$/;"	c
ModHausdorffDist	omniglot/matlab/one-shot-classification/demo_classification.m	/^function mhd = ModHausdorffDist(A,B)$/;"	f
ModHausdorffDistance	omniglot/python/one-shot-classification/demo_classification.py	/^def ModHausdorffDistance(itemA,itemB):$/;"	f
Model	model.py	/^class Model(object):$/;"	c
REPO_DIR	data_utils.py	/^REPO_DIR = os.path.join(MAIN_DIR, 'omniglot')$/;"	v
REPO_LOCATION	data_utils.py	/^REPO_LOCATION = 'https:\/\/github.com\/brendenlake\/omniglot.git'$/;"	v
TEST_DIR	data_utils.py	/^TEST_DIR = os.path.join(DATA_DIR, 'images_evaluation')$/;"	v
TEST_ROTATIONS	data_utils.py	/^TEST_ROTATIONS = False  # augment testing data with rotations$/;"	v
TRAIN_DIR	data_utils.py	/^TRAIN_DIR = os.path.join(DATA_DIR, 'images_background')$/;"	v
TRAIN_ROTATIONS	data_utils.py	/^TRAIN_ROTATIONS = True  # augment training data with rotations$/;"	v
Trainer	train.py	/^class Trainer(object):$/;"	c
__init__	memory.py	/^  def __init__(self, key_dim, memory_size, vocab_size,$/;"	m	class:LSHMemory
__init__	memory.py	/^  def __init__(self, key_dim, memory_size, vocab_size,$/;"	m	class:Memory
__init__	model.py	/^  def __init__(self, image_size, num_channels, hidden_dim):$/;"	m	class:LeNet
__init__	model.py	/^  def __init__(self, input_dim, output_dim, rep_dim, memory_size, vocab_size,$/;"	m	class:Model
__init__	model.py	/^  def __init__(self, output_dim):$/;"	m	class:BasicClassifier
__init__	train.py	/^  def __init__(self, train_data, valid_data, input_dim, output_dim=None):$/;"	m	class:Trainer
apply_to_nested	omniglot/matlab/apply_to_nested.m	/^function ndataset = apply_to_nested(dataset,fnc)$/;"	f
cdist	omniglot/python/one-shot-classification/demo_classification.py	/^from scipy.spatial.distance import cdist$/;"	i
classification_run	omniglot/python/one-shot-classification/demo_classification.py	/^def classification_run(folder,f_load,f_cost,ftype='cost'):$/;"	f
clear	memory.py	/^  def clear(self):$/;"	m	class:LSHMemory
clear	memory.py	/^  def clear(self):$/;"	m	class:Memory
clear_memory	model.py	/^  def clear_memory(self, sess):$/;"	m	class:Model
compute_correct	train.py	/^  def compute_correct(self, ys, y_preds):$/;"	m	class:Trainer
compute_costM_fast	omniglot/matlab/one-shot-classification/myclassify.m	/^function costM = compute_costM_fast(trainset,testset,fcost)$/;"	f
compute_costM_slow	omniglot/matlab/one-shot-classification/myclassify.m	/^function costM = compute_costM_slow(trainset,testset,fcost)$/;"	f
copy	omniglot/python/one-shot-classification/demo_classification.py	/^import copy$/;"	i
core_builder	model.py	/^  def core_builder(self, memory_val, x, y):$/;"	m	class:BasicClassifier
core_builder	model.py	/^  def core_builder(self, x):$/;"	m	class:LeNet
core_builder	model.py	/^  def core_builder(self, x, y, keep_prob, use_recent_idx=True):$/;"	m	class:Model
crawl_directory	data_utils.py	/^def crawl_directory(directory, augment_with_rotations=False,$/;"	f
data_utils	train.py	/^import data_utils$/;"	i
demo_classification	omniglot/matlab/one-shot-classification/demo_classification.m	/^function demo_classification()$/;"	f
episode_predict	model.py	/^  def episode_predict(self, sess, x, y, clear_memory=False):$/;"	m	class:Model
episode_step	model.py	/^  def episode_step(self, sess, x, y, clear_memory=False):$/;"	m	class:Model
eval	model.py	/^  def eval(self, x, y):$/;"	m	class:Model
fname_label	omniglot/python/one-shot-classification/demo_classification.py	/^fname_label = 'class_labels.txt' # where class labels are stored for each run$/;"	v
get	memory.py	/^  def get(self):  # not implemented$/;"	m	class:LSHMemory
get	memory.py	/^  def get(self):$/;"	m	class:Memory
get_classifier	model.py	/^  def get_classifier(self):$/;"	m	class:Model
get_color	omniglot/matlab/plot_motor_on_image.m	/^function out = get_color(k)$/;"	f
get_data	data_utils.py	/^def get_data():$/;"	f
get_embedder	model.py	/^  def get_embedder(self):$/;"	m	class:Model
get_hash_slots	memory.py	/^  def get_hash_slots(self, query):$/;"	m	class:LSHMemory
get_hint_pool_idxs	memory.py	/^  def get_hint_pool_idxs(self, normalized_query):$/;"	m	class:LSHMemory
get_hint_pool_idxs	memory.py	/^  def get_hint_pool_idxs(self, normalized_query):$/;"	m	class:Memory
get_memory	model.py	/^  def get_memory(self):$/;"	m	class:Model
get_model	train.py	/^  def get_model(self):$/;"	m	class:Trainer
get_optimizer	model.py	/^  def get_optimizer(self):$/;"	m	class:Model
get_xy_placeholders	model.py	/^  def get_xy_placeholders(self):$/;"	m	class:Model
imread	data_utils.py	/^from scipy.ndimage import imread$/;"	i
imread	omniglot/python/one-shot-classification/demo_classification.py	/^from scipy.ndimage import imread$/;"	i
imresize	data_utils.py	/^from scipy.misc import imresize$/;"	i
imrotate	data_utils.py	/^from scipy.misc import imrotate$/;"	i
individual_compute_correct	train.py	/^  def individual_compute_correct(self, y, y_pred):$/;"	m	class:Trainer
labels	omniglot/python/one-shot-classification/demo_classification.py	/^fname_label = 'class_labels.txt' # where class labels are stored for each run$/;"	c
logging	data_utils.py	/^import logging$/;"	i
logging	train.py	/^import logging$/;"	i
main	data_utils.py	/^def main(unused_argv):$/;"	f
main	train.py	/^def main(unused_argv):$/;"	f
make_update_op	memory.py	/^    def make_update_op():$/;"	f	function:Memory.query
make_update_op	memory.py	/^  def make_update_op(self, upd_idxs, upd_keys, upd_vals,$/;"	m	class:LSHMemory
make_update_op	memory.py	/^  def make_update_op(self, upd_idxs, upd_keys, upd_vals,$/;"	m	class:Memory
maybe_download_data	data_utils.py	/^def maybe_download_data():$/;"	f
memory	model.py	/^import memory$/;"	i
model	train.py	/^import model$/;"	i
myclassify	omniglot/matlab/one-shot-classification/myclassify.m	/^function [perror,YHAT] = myclassify(trainset,testset,fcost,Y,ftype)$/;"	f
normalize	omniglot/matlab/one-shot-classification/demo_classification.m	/^function d = normalize(d)$/;"	f
np	data_utils.py	/^import numpy as np$/;"	i
np	memory.py	/^import numpy as np$/;"	i
np	omniglot/python/one-shot-classification/demo_classification.py	/^import numpy as np$/;"	i
np	train.py	/^import numpy as np$/;"	i
nrun	omniglot/python/one-shot-classification/demo_classification.py	/^nrun = 20 # number of classification runs$/;"	v
one_step	model.py	/^  def one_step(self, sess, x, y):$/;"	m	class:Model
os	data_utils.py	/^import os$/;"	i
os	train.py	/^import os$/;"	i
perror	omniglot/python/one-shot-classification/demo_classification.py	/^	perror = np.zeros(nrun)$/;"	v
pickle	data_utils.py	/^import pickle$/;"	i
plot_image_only	omniglot/matlab/plot_image_only.m	/^function plot_image_only(I)$/;"	f
plot_motor_on_image	omniglot/matlab/plot_motor_on_image.m	/^function plot_motor_on_image(I,drawing,bool_start,lw)$/;"	f
plot_start_loc	omniglot/matlab/plot_motor_on_image.m	/^function plot_start_loc(start,num)$/;"	f
plot_traj	omniglot/matlab/plot_motor_on_image.m	/^function plot_traj(stk,color,lw)$/;"	f
predict	model.py	/^  def predict(self, sess, x, y=None):$/;"	m	class:Model
preprocess_omniglot	data_utils.py	/^def preprocess_omniglot():$/;"	f
process	omniglot/matlab/apply_to_nested.m	/^function Ac = process(A,fnc)$/;"	f
query	memory.py	/^  def query(self, query_vec, intended_output, use_recent_idx=True):$/;"	m	class:Memory
randint	omniglot/matlab/Dataset.m	/^function out = randint(m,n,rg)$/;"	f
random	train.py	/^import random$/;"	i
resize_images	data_utils.py	/^def resize_images(images, new_width, new_height):$/;"	f
rs	omniglot/python/one-shot-classification/demo_classification.py	/^			rs = '0' + rs		$/;"	v
rs	omniglot/python/one-shot-classification/demo_classification.py	/^		rs = str(r)$/;"	v
run	train.py	/^  def run(self):$/;"	m	class:Trainer
sample_episode_batch	train.py	/^  def sample_episode_batch(self, data,$/;"	m	class:Trainer
set	memory.py	/^  def set(self, k, v, a, r=None):  # not implemented$/;"	m	class:LSHMemory
set	memory.py	/^  def set(self, k, v, a, r=None):$/;"	m	class:Memory
setup	model.py	/^  def setup(self):$/;"	m	class:Model
space_img_to_motor	omniglot/matlab/space_img_to_motor.m	/^function new_pt = space_img_to_motor(pt)$/;"	f
space_motor_to_img	omniglot/matlab/space_motor_to_img.m	/^function new_pt = space_motor_to_img(pt)$/;"	f
subprocess	data_utils.py	/^import subprocess$/;"	i
tf	data_utils.py	/^import tensorflow as tf$/;"	i
tf	memory.py	/^import tensorflow as tf$/;"	i
tf	model.py	/^import tensorflow as tf$/;"	i
tf	train.py	/^import tensorflow as tf$/;"	i
total	omniglot/python/one-shot-classification/demo_classification.py	/^	total = np.mean(perror)$/;"	v
train	model.py	/^  def train(self, x, y):$/;"	m	class:Model
training_ops	model.py	/^  def training_ops(self, loss):$/;"	m	class:Model
write_datafiles	data_utils.py	/^def write_datafiles(directory, write_file,$/;"	f
